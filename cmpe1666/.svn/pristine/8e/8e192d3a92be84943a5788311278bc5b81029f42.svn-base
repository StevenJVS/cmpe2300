using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;


namespace Lab2
{
    public partial class Form1 : Form
    {
        Bitmap original;
        Bitmap filtered;
        int track;

        Random random;

        public Form1()
        {
            InitializeComponent();
            random = new Random();
        }

        private void UI_loadpicture_btn_Click(object sender, EventArgs e)
        {
            if (UI_openFileDialog1.ShowDialog() == DialogResult.OK)
            {
                UI_picturebox.Image = Image.FromFile(UI_openFileDialog1.FileName);
            }
        }

        private void UI_apply_btn_Click(object sender, EventArgs e)
        {
            UI_progressbar.Value = 0;
            original = new Bitmap(UI_picturebox.Image);
            filtered = new Bitmap(UI_picturebox.Image);
            track = UI_trackbar.Value;

            if (UI_contrast_rbtn.Checked)
            {
                contrast(filtered, track);
            }
            else if (UI_tint_rbtn.Checked)
            {

            }
            else if (UI_BW_rbtn.Checked)
            {
                BW(filtered, track);
                UI_picturebox.Image = filtered;
            }
            else if (UI_noise_rbtn.Checked)
            {

            }
            UI_progressbar.Value = 100;
        }
        private void BW(Bitmap filtered, int track)
        {

            double intensity = track / 100.0;
            if (UI_picturebox.Image != null)
            {
                for (int x = 0; x < filtered.Width; x++)
                {
                    for (int y = 0; y < filtered.Height; y++)
                    {
                        Color pixel = filtered.GetPixel(x, y);

                        int gray = (int)(pixel.R * 0.3 + pixel.G * 0.59 + pixel.B * 0.11);

                        Color newPixel = Color.FromArgb(
                            (int)(gray + (255 - gray) * intensity),
                            (int)(gray + (255 - gray) * intensity),
                            (int)(gray + (255 - gray) * intensity));

                        filtered.SetPixel(x, y, newPixel);
                    }
                }

            }
            else return;
        }
        private void contrast(Bitmap filtered, int track)
        {
            double intensity = track / 100;
            if (UI_picturebox.Image != null)
            {
                for (int x = 0; x < filtered.Width; x++)
                {
                    for (int y = 0; y < filtered.Height; y++)
                    {
                        Color originalColor = filtered.GetPixel(x, y);

                        int red = newpixel(originalColor.R, intensity);
                        int green = newpixel(originalColor.G, intensity);
                        int blue = newpixel(originalColor.B, intensity);

                        int adjustedRed = (int)Math.Min(Math.Max(red, 0), 255);
                        int adjustedGreen = (int)Math.Min(Math.Max(green, 0), 255);
                        int adjustedBlue = (int)Math.Min(Math.Max(blue, 0), 255);

                        Color adjustedColor = Color.FromArgb(originalColor.A, adjustedRed, adjustedGreen, adjustedBlue);
                        filtered.SetPixel(x, y, adjustedColor);
                    }
                }
            }
        }
        private int newpixel(int pixel, double intensity)
        {
            int num;
            if (pixel < 128)
            {
                num = (int)(pixel - (pixel * intensity));
            }
            else if (pixel > 128)
            {
                num = (int)(pixel + (pixel * intensity));
            }
            else
                num = pixel;
            return num;
        }
    }
}
