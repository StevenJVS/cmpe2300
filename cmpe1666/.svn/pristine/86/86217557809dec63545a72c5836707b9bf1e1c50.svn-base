using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.IO;

namespace ica9
{
    public partial class Form1 : Form
    {
        System.Diagnostics.Stopwatch sw = new System.Diagnostics.Stopwatch();//stopwatch
        StreamReader sr;
        public struct Employees
        {
            public int _id;
            public int _salary;
            public string display;
            public Employees(int id, int salary)
            {
                _id = id;
                _salary = salary;
                display = $"{id}:    {salary}";
            }

        }
        List<Employees> datalist;
        List<Employees> files;
        List<Employees> copy;
        int[] employee_id = {28, 53, 12, 18, 8, 2, 19, 57, 62, 34, 23, 14,
        48, 35, 55, 22, 26, 15, 7, 9, 32, 43, 41, 51};
        int[] salary = {4500, 2800, 1900, 3100, 7000, 3500, 2200, 2800, 2850,
        3150, 4000, 4500, 6000, 7200, 3700, 2100, 2450, 2500, 3250, 3700,
        3800, 4200, 4100, 3900};
        public Form1()
        {
            InitializeComponent();
            files= new List<Employees> ();
            datalist = new List<Employees> ();
        }

        private void UI_loadfiles_Click(object sender, EventArgs e)
        {
            string sInput;
            int num;
            List<int> num1 = new List<int>();
            List<int> num2 = new List<int>();
            if (UI_Rfiledata.Checked)
            {
                UI_openFileDialog1 = new OpenFileDialog();
                if (UI_openFileDialog1.ShowDialog() == DialogResult.OK)
                {
                    sr = new StreamReader(UI_openFileDialog1.FileName);
                    while ((sInput = sr.ReadLine()) != null)
                    {
                        int.TryParse(sInput, out num);
                        num1.Add(num);
                    }
                }
                if (UI_openFileDialog2.ShowDialog() == DialogResult.OK)
                {
                    sr = new StreamReader(UI_openFileDialog2.FileName);
                    while ((sInput = sr.ReadLine()) != null)
                    {
                        int.TryParse(sInput, out num);
                        num2.Add(num);
                    }
                }
                for (int i = 0; i < num1.Count; i++)
                {
                    files.Add(new Employees(num1[i], num2[i]));
                    UI_unsortedlist.Items.Add(files[i].display);
                }
                copy = new List<Employees>(files);
            }            
        }

        private void UI_radio(object sender, EventArgs e)
        {
            if (UI_Rprovided.Checked)
            {
                
                UI_unsortedlist.Items.Clear();
                UI_loadfiles.Enabled = false;
                for (int i = 0; i < employee_id.Length; i++)
                {
                    datalist.Add(new Employees(employee_id[i], salary[i]));
                    UI_unsortedlist.Items.Add(datalist[i].display);
                }
                copy = new List<Employees>(datalist);
            }
            if(UI_Rfiledata.Checked)
            {
                UI_unsortedlist.Items.Clear();
                UI_loadfiles.Enabled = true;
            }
        }
        private static void bubblesort(List<Employees> myList)
        {
            int n = myList.Count;

            for (int p = 0; p < n - 1; p++)
            {
                for (int j = 0; j < (n - (p + 1)); j++)
                {
                    if (myList[j]._id > myList[j + 1]._id)
                    {
                        swap(myList, j, j + 1);
                    }
                }
            }
        }
        static private void swap(List<Employees> myList, int x, int y) 
        {
            Employees temp = myList[x];
            myList[x] = myList[y];
            myList[y] = temp;
        }
        private static void quicksort(List<Employees> myList, int low, int high) 
        {
            int pi;

            if(low > high)
            {
                pi = parition(myList, low, high);
                quicksort(myList, low, pi - 1);
                quicksort(myList, pi + 1, high);
            }
        }
        private static int parition(List<Employees> myList, int low, int high)
        {
            int pi = myList[high]._id;

            int i = low - 1;

            for(int j = low; j < high; j++)
            {
                if (myList[j]._id < pi)
                {
                    swap(myList, i, j);
                }
            }

            swap(myList, i+1, high);
            return(i+1);

        }

        private void UI_bubblesort_Click(object sender, EventArgs e)
        {
           
        }
    }
}
