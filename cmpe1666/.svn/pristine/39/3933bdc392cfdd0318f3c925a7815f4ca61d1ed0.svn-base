using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using GDIDrawer;

namespace ica10
{
    public partial class Form1 : Form
    {
        public struct SLine
        {
            public Point start;
            public Point end;
            public Color color;
            public byte thick;

            //constructor to assign default values
            public SLine(Point _start, Point _end, Color _color, byte _thick)
            {
                //save 
                start = _start;
                end = _end;
                color = _color;
                thick = _thick;
            }
        }
        Point start;
        private enum eState {Idle, Armed};
        CDrawer canvas;
        List<SLine> lines;
        List<SLine> modlines;
        eState state;
        Random rand = new Random();
        public Form1()
        {
            InitializeComponent();
            lines = new List<SLine>();
            modlines = new List<SLine>();
            canvas = new CDrawer(800, 800, false);
            UI_timer.Enabled = true;
        }
        private void Form1_Load(object sender, EventArgs e)
        {
            canvas.Render();
            UI_label.Text = state.ToString();
            state = eState.Idle;
        }
        private void Render(SLine line)
        {
            canvas.AddLine(line.start.X, line.start.Y, line.end.X,line.end.Y, line.color, line.thick);
            canvas.Render();
        }
        private void Render()
        {          
            foreach (SLine line in modlines)
            {
                Render(line);
            }
        }

        private void UI_timer_Tick(object sender, EventArgs e)
        {
            Point left;
            Point right; ;
            byte thick = 5;
            if (canvas.GetLastMouseLeftClick(out left))//if mouse has been clicked
            {
                if(state == eState.Idle)
                {
                    start = new Point(left.X, left.Y);
                    state = eState.Armed;

                }
                else
                {
                    SLine line = new SLine(start,left,Color.Red,thick);
                    lines.Add(line);
                    Render(line);
                    state = eState.Idle;

                }
                UI_label.Text = state.ToString();
            }
            if (canvas.GetLastMouseRightClick(out right))
            {
                modlines.Clear();

                foreach(SLine i in lines)
                {
                    modlines.Add(new SLine(i.start, i.end, RandColor.GetColor(), (byte)rand.Next(1,16)));
                }
                canvas.Clear();
                canvas.Render();
                Render();
            }
        }
    }
}
